<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git介绍]]></title>
    <url>%2F2019%2F02%2F16%2Fgit%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[Git安装：Git安装参考网站 由于本人不擅长安装各种软件，感觉操作起来很难，可以网上看别人的博客，步骤挺详细的 引题：代码版本控制工具，专门负责代码的管理，除了上传、下载、同步，还需要查看代码修改了哪部分这类功能。意义：跟英语一样是个工具，虽然没有它也可以编程。但代码版本工具会大幅度提高工作效率；github上能学习别人的代码。 优势1.记录每次代码变更的内容和时间点，如果代码崩溃或丢失，可以快速恢复到之前任意时间点版本。2.多人协作。如果代码冲突可以直观看到解决。合并多人代码时方便。 发展历程1.软件项目较小，程序员自己写一个软件。2.随着互联网发展，软件项目复杂。软件需要多人协作分模块开发。项目经理分派任务，各个程序员开发，开发好之后通过qq或u盘传给项目经理，项目经理合并代码。缺点，多个人修改同一个代码，项目经理合并时容易出错或导致bug。3.引入代码管理控制工具，代表SVN,曾经占据大部分市场。==缺点==：当时的程序员素质不高，用SVN同步文件而不是管理代码，svn是中心化的，由服务器来保存代码和处理功能，如果服务器上的代码仓库意外损坏，客户机本地仓库也跟着无法使用。4.现在市场最火的代码版本工具，git。优点：git去中心化的，每一个客户机都保留着一个代码仓库，如果服务器的代码仓库被损坏，那么可以从客户机的仓库恢复：git的主要社区github有大量的开源项目和开发者非常火热。 开源：open source, 原来的软件公司，开发一个功能的软件，然后商业化卖钱。缺点：价格高，盗版多。 开源，软件代码共享出来，谁的都可以看，谁都可以在它的基础上修改，甚至可以加工后自己再卖钱。人人为我，我为人人。免费、共享使的github社区非常流行。目前的开源软件模式，前期免费、发展壮大、开发功能进阶版的收费企业版。 学习建议1.理解 本地、暂存区、提交、远程仓库2.先学基本命令，随着写项目满满熟练。先不要看高级命令，因为几乎用不到，不要在git上花费太多时间。以后工作中用到的高级技巧再百度。3.根据图示理解 分支，HEAD指针，时间轴。 工作区：工作区：指windows资源管理器，你正在编辑项目文件 .py .htmladd操作文件放入暂存区：告诉git那些文件需要跟踪、被版本控制，那些文件不需要跟踪。一般情况下跟踪所有。本地commit提交 文件放入提交区，把现在的工程目录和文件状态记录 第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区 第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。 因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。 你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。 分布式和集中式git是分布式版本控制系统 集中式版本控制系统：先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，太慢了。 分布式版本控制系统：那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。 总结：集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库。某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。 我这都是在博客上看别人的文章总结的，这个大神的文章特别好，还包括Python,JAVA等学习知识点， 更具体的Git语法可以参考这个网址：]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[远程推送]]></title>
    <url>%2F2019%2F02%2F16%2F%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81%2F</url>
    <content type="text"><![CDATA[首先，进入的gitStore目录下（没有的话自己创建一个）1.git init 在gitStore目录下 初始化一个git仓库 2.git add 复制一个文件到gitStore目录下，然后执行git add . 将“修改”从当前工作区存放到暂存区 3.git commit -m “first commit” 将暂存区中存放的文件提交到git仓库 4.在远端新建一个git代码库：https://github.com/zhfei/iOS-my-CodeSnippets.git 5.git remote add origin https://github.com/zhfei/iOS-my-CodeSnippets.git 将本地代码库的当前分支与远程的代码库相关联 6.git push -u origin master 将本地代码库的当前分支推送到远程的代码库 另：命令补充！ 查看git仓库的远程代码库的地址：git remote -v 本文章属于转载转载于这位大神，更多好文章可以参考大神网址，点击这里跳转到大神界面]]></content>
      <categories>
        <category>代码托管平台</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代码托管平台]]></title>
    <url>%2F2019%2F02%2F16%2F%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0%2F</url>
    <content type="text"><![CDATA[1.Git是开放式版本控制系统，git安装参考网站具体git用法细节参考廖雪峰官方网站Git git的优点git是分布式的，svn不是git分布式本地就可以用，可以随便保存各种历史痕迹，不用担心污染服务器，连不上服务器也能提交代码、查看log。GIT分支和SVN的分支不同分支在SVN中实际上是版本库中的一份copy，而git一个仓库是一个快照，所以git 切换、合并分支等操作更快速。git有一个强大的代码仓库管理系统 - gitlab可以很方便的管理权限、代码review，创建、管理project 2.Github是在线的基于Git的代码托管服务。[github具体使用参考我的另一篇博客] (https://blog.csdn.net/qq_43503724/article/details/86103744)GitHub是2008年由Ruby on Rails编写而成。GitHub同时提供付费账户和免费账户。这两种账户都可以创建公开的代码仓库，只有付费账户可以创建私有的代码仓库。 3. Gitlab解决了这个问题, 可以在上面创建免费的私人repo。 GitLab是利用 Ruby on Rails 一个开源的版本管理系统，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。它拥有与Github类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序(Wall)进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找. 4.码云(gitee)也可以创建免费的私人的repo。4.1 码云介绍：码云是开源中国社区2013年推出的基于 Git 的完全免费的代码托管服务，这个服务是基于 Gitlab 开源软件所开发的，在 Gitlab 的基础上做了大量的改进和定制开发，目前已经成为国内最大的代码托管系统，致力于为国内开发者提供优质稳定的托管服务。 4.2 码云功能码云除了提供最基础的 Git 代码托管之外，还提供代码在线查看、历史版本查看、Fork、Pull Request、打包下载任意版本、Issue、Wiki 、保护分支、代码质量检测、PaaS项目演示等方便管理、开发、协作、共享的功能。]]></content>
      <categories>
        <category>代码托管平台</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[主题美化]]></title>
    <url>%2F2019%2F02%2F16%2F%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%2F</url>
    <content type="text"><![CDATA[1 添加标签页面 2 添加搜索功能 安装插件2.1 在自己博客根目录下（我的目录：D:\blog\hexo），执行如下命令 cnpm install hexo-generator-searchdb –save 2.2 修改站点配置文件 修改根目录下的_config.yml（我的目录：D:\blog_config.yml），在最底部添加如下配置 12345search: path: search.xml field: post format: html limit: 10000 2.3 修改主题配置文件 修改主体下的themes\next_config.yml配置文件（我的目录：D:\workspace\hexo\themes\next_config.yml），搜索local_search，修改enable为true 1234567local_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 2.4 删除文章 123删除文章的过程一样也很简单，先删除本地文件，然后通过生成和部署命令进而将远程仓库中的文件也一并删除。具体来说，以最开始默认形成的helloworld.md这篇文章为例。首先进入到source / _post 文件夹中，找到helloworld.md文件，在本地直接执行删除。然后依次执行hexo g，hexo d，再去主页查看你就会发现你的博客上面已经空空如也了，这就是如何删除文章的方法。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo常用命令]]></title>
    <url>%2F2019%2F02%2F16%2Fhexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[12345678910111213hexo n &quot;博客名&quot; 生成博客文章 在_postshexo g -d 生成静态文件和发表到github上hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo clean #清除部署緩存hexo n == hexo new #新建文章hexo g == hexo generate #生成静态页面至public目录hexo s == hexo server #开启预览访问端口（默认端口4000，可在浏览器输入localhost:4000预览）hexo d == hexo deploy #将.deploy目录部署到GitHubhexo g -d #生成加部署 hexo g -s #生成加预览hexo s --debug 开启debug模式]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo添加锚链接]]></title>
    <url>%2F2019%2F02%2F16%2Fhexo%E6%B7%BB%E5%8A%A0%E9%94%9A%E9%93%BE%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[拿我的说打开blog/themes/next/_config.yml,_config.yml这个文件下配置social_icon,在图标库找自己喜欢的小图标，并将名字复制在如下位置，保存即可。如下所示： social: GitHub: https://github.com/yourname || github CSDN: https://blog.csdn.net/qq_43503724 || copyright #E-Mail: mailto:yourname@gmail.com || envelope #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype social_icons: enable: true Github: github CSDN: copyright icons_only: false transition: false]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[scrapy]]></title>
    <url>%2F2019%2F02%2F15%2Fscrapy%2F</url>
    <content type="text"><![CDATA[scrapy是一个流行的爬虫框架。架构分层，适合复杂项目并易于扩展。封装异步包，实现并发请求和分布式部署。 框架架构介绍 引擎（scrapy engine)处理整个系统的数据流，触发事务。 调度器（scheduler ）接收引擎发过来的请求，压入队列，去重，决定下一次请求的url。 下载器（downloader)根据url请求网页，下载网页原始内容，并将网页内容返回给spiders。（基于twisted,异步请求） 爬虫（spiders)从网页信息中提取实体信息，返回单个实体item。也可以提取链接供之后爬取。 管道（pipeline)接收单个实体item，好像生产线一样进行加工。验证item是否有效，持久化数据（写csv或数据库）。 下载中间件、爬虫中间件、调度中间件（middle）上述主要模块无法满足的更细化或更前置的需求。例如django也有中间件，需求：用户进入视图函数前新建数据库连接、验证用户sessionid，请求后要销毁数据库链接。 运行流程 引擎从调度器里去一个url待请求 引擎接收到后封装为一个请求，交给下载器 下载器请求网页，返回response 爬虫解析response得到实体item item交给管道进行处理 安装scrapyscrapy依赖包较多，有些包用c写的需要vc编译器。 方法一：anaconda, 自带上千种编译好的科学计算相关包。优点自带编译后的scrapy。缺点：体积大，下载包300m，安装一个多G。主要是科学计算领域，大多数包用不上，flask django又没有需要新下。miniconda是anaconda的精简版本。版本有限。缺少.net会导致无报错失败。方法二(推荐)：pip install scrapy 哪些包报错需要vc编译器的，再单独去发布编译后的包的网站下载对应平台编译后的.whl文件安装。参考链接：1.第三方编译后包的网站 https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted。 图文教程 https://www.1owo.com/python/python/python-scrapy%E5%AE%89%E8%A3%85%E4%B9%8Bwindows%E7%8E%AF%E5%A2%83%E4%B8%8B/ 创建项目创建项目 scrapy startproject [项目名]根据预设模板创建爬虫文件 scrapy genspider [爬虫名] [域名]运行爬虫 scrapy crawl [爬虫名]]]></content>
      <categories>
        <category>scrapy</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F01%2F10%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
